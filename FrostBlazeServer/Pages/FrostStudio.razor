@page "/froststudio"

@using FrostDbClient

<h1>Frost Studio</h1>

<h2>Instance Information</h2>
<table class="table">
    <tr>
        <th>IP Address</th>
        <th>Console Port Number (Default 519)</th>
        <th>Studio Port Number (Default 525)</th>
    </tr>
    <tr>
        <td><input type="text" id="ipAddress" @bind="IPAddress"/></td>
        <td><input type="text" id="consolePortNumber" @bind="ConsolePortNumber"/></td>
        <td><input type="text" id="studioPortNumber" @bind="StudioPortNumber"/></td>
    </tr>
</table>

<p>
<h2>Create Database</h2>
DatabaseName: <input type="text" id="newDatabaseName" @bind="NewDatabaseName"/>
<input type="button" @onclick="CreateNewDatabase" value="Create Database"/>
</p>

<p>
<h2>Databases</h2> <input type="button" @onclick="ConnectToInstance" value="Load Databases"/>
<select id="databaseNames" @bind="SelectedDatabaseName">
    @foreach (var db in DatabaseNames)
    {
        <option value="@db">@db</option>
    }
</select>
</p>

<p>
<h2>Create Table</h2> 
@if (SelectedDatabaseName != string.Empty)
{
    <h3>For Database: @SelectedDatabaseName</h3>
}
</p>

<!-- need to create UI to add column names and column types when creating a new table -->

<p>
TableName: <input type="text" id="newTableName" @bind="NewTableName"/>
<input type="button" @onclick="CreateNewTable" value="Create Table"/>
</p>

@code {
    private string SelectedDatabaseName = string.Empty;
    private FrostClient _client;
    private string IPAddress = string.Empty;
    private int ConsolePortNumber = 0;
    private int StudioPortNumber = 0;
    private string NewTableName = string.Empty;
    private List<string> DatabaseNames = new List<string>();
    private string NewDatabaseName = string.Empty;
    private FrostClient Client
    {
        get
        {
            if (_client is null)
            {
                return _client = new FrostClient(IPAddress, "127.0.0.1", ConsolePortNumber, StudioPortNumber);
            }
            else
            {
                return _client;
            }
        }
        set
        {
            _client = value;
        }
    }

    private void CreateNewTable()
    {
        throw new NotImplementedException();
    }

    private async Task<List<string>> ConnectToInstance()
    {
        try
        {
            DatabaseNames.Clear();
            
            var task = Client.GetDatabasesAsync();
            await task;
            Client.GetDatabases();

            DatabaseNames = Client.Info.DatabaseNames;
            DatabaseNames.Sort();

            return task.Result;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            return null;
        }
    }

    private void CreateNewDatabase()
    {
        Client.AddNewDatabase(NewDatabaseName);
    }
}
