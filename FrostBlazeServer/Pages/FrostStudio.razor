@page "/froststudio"

@using FrostDbClient
@using FrostCommon.ConsoleMessages
@using System.Diagnostics

<h1>Frost Studio</h1>

<h2>Instance Information</h2>
<table class="table">
    <tr>
        <th>IP Address</th>
        <th>Console Port Number (Default 519)</th>
        <th>Studio Port Number (Default 525)</th>
    </tr>
    <tr>
        <td><input type="text" id="ipAddress" @bind="IPAddress"/></td>
        <td><input type="text" id="consolePortNumber" @bind="ConsolePortNumber"/></td>
        <td><input type="text" id="studioPortNumber" @bind="StudioPortNumber"/></td>
    </tr>
</table>

<p>
<h2>Create Database</h2>
DatabaseName: <input type="text" id="newDatabaseName" @bind="NewDatabaseName"/>
<input type="button" @onclick="CreateNewDatabase" value="Create Database"/>
</p>

<p>
<h2>Databases</h2> <input type="button" @onclick="ConnectToInstance" value="Load Databases"/>
<select id="databaseNames" value="SelectedDatabaseName" @onchange="GetTableNamesForDatabase">
    @foreach (var db in DatabaseNames)
    {
        <option value="@db">@db</option>
    }
</select>
</p>

<p>
<h2>Tables</h2>
<select id="tableNames" @bind="SelectedTableName">
    @foreach (var table in TableNames)
    {
        <option value="@table">@table</option>
    }
</select>

</p>

<p>
<h2>Create Table</h2> 
@if (SelectedDatabaseName != string.Empty)
{
    <h3>For Database: @SelectedDatabaseName</h3>
}
</p>

<!-- need to create UI to add column names and column types when creating a new table -->

<p>
TableName: <input type="text" id="newTableName" @bind="NewTableName"/>
<input type="button" @onclick="CreateNewTable" value="Create Table"/>
Add Column: <input type="text" id="newColumnName" @bind="NewColumnName" />
<select id="dataTypes" @bind="SelectedDataType">
    <option value=@_dateTimeType> @_dateTimeType</option>
    <option value=@_intType>@_intType</option>
    <option value=@_floatType>@_floatType</option>
    <option value=@_stringType>@_stringType</option>
</select>
<input type="button" @onclick="AddColumnToTable" value="Add Column To Table"/>
<input type="button" @onclick="ClearItemsFromTable" value="Reset Columns"/>
Columns: <select name="tableColumns" multiple @bind="NewColumnForTable">
@foreach (var column in NewColumnsForTable)
{
    <option value=@column>@column</option>
}
</select>
</p>

@code {
    string _intType = "System.Int32";
    string _floatType = "System.Single";
    string _dateTimeType = "System.DateTime";
    string _stringType = "System.String";
    List<(string, Type)> _columns = new List<(string, Type)>();
    private string NewColumnForTable = string.Empty;
    private List<string> NewColumnsForTable = new List<string>();
    private List<string> TableNames = new List<string>();
    private string SelectedDatabaseName = string.Empty;
    private string SelectedTableName = string.Empty;
    private FrostClient _client;
    private string IPAddress = string.Empty;
    private int ConsolePortNumber = 0;
    private int StudioPortNumber = 0;
    private string NewTableName = string.Empty;
    private List<string> DatabaseNames = new List<string>();
    private string NewDatabaseName = string.Empty;
    private string NewColumnName = string.Empty;
    private string SelectedDataType = string.Empty;
    private FrostClient Client
    {
        get
        {
            if (_client is null)
            {
                return _client = new FrostClient(IPAddress, "127.0.0.1", ConsolePortNumber, StudioPortNumber);
            }
            else
            {
                return _client;
            }
        }
        set
        {
            _client = value;
        }
    }

    private async Task GetTableNamesForDatabase(ChangeEventArgs e)
    {
        TableNames.Clear();
        Debug.WriteLine("GetTableNamesForDatabase");
        Debug.WriteLine(e.Value.ToString());

        SelectedDatabaseName = e.Value.ToString();

        var task = Client.GetDatabaseInfoAsync(SelectedDatabaseName);
        await task;

        Client.GetDatabaseInfo(SelectedDatabaseName);
        DatabaseInfo item;
        if (Client.Info.DatabaseInfos.TryGetValue(SelectedDatabaseName, out item))
        {
            item.Tables.ForEach(table => TableNames.Add(table.Item2));
        }
    }

    private void CreateNewTable()
    {
        Client.AddTableToDb(SelectedDatabaseName, NewTableName, _columns);
    }

    private void AddColumnToTable()
    {
        string col = NewColumnName + "-" + SelectedDataType;

        var item = (NewColumnName, Type.GetType(SelectedDataType));
        
        _columns.Add(item);
        NewColumnsForTable.Add(col);
    }

    private void ClearItemsFromTable()
    {
        NewColumnsForTable.Clear();
        _columns.Clear();
    }

    private async Task<List<string>> ConnectToInstance()
    {
        try
        {
            DatabaseNames.Clear();

            var task = Client.GetDatabasesAsync();
            await task;
            Client.GetDatabases();

            DatabaseNames = Client.Info.DatabaseNames;
            DatabaseNames.Sort();

            return task.Result;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            return null;
        }
    }

    private void CreateNewDatabase()
    {
        Client.AddNewDatabase(NewDatabaseName);
    }
}
