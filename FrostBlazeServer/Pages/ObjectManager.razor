@page "/objectmanager"

@inject Services.Client FrostService

@using Services
@using FrostCommon.ConsoleMessages
@using System.Diagnostics

<h1>Object Manager</h1>

<Instance @ref="instance"></Instance>

<p>
<h2>Create Database</h2>
DatabaseName: <input type="text" id="newDatabaseName" @bind="NewDatabaseName"/>
<input type="button" @onclick="CreateNewDatabase" value="Create Database"/>
</p>

<p>
<h2>Databases</h2> <input type="button" @onclick="ConnectToInstance" value="Load Databases"/>
<select id="databaseNames" value="SelectedDatabaseName" @onchange="GetTableNamesForDatabase">
    @foreach (var db in DatabaseNames)
    {
        <option value="@db">@db</option>
    }
</select>
</p>

<p>
<h2>Tables</h2>
<select id="tableNames" @onchange="GetColumnInfoForTable" value="SelectedTableName">
    @foreach (var table in TableNames)
    {
        <option value="@table">@table</option>
    }
</select>
</p>

<p>
<h2>Columns</h2>    
<select name="tableColumnsSelected" multiple @bind="NewColumnForTable">
@foreach (var column in ColumnNames)
{
    <option value=@column>@column</option>
}
</select>
</p>

<p>
<h2>Create Table</h2> 
@if (SelectedDatabaseName != string.Empty)
{
    <h3>For Database: @SelectedDatabaseName</h3>
}
</p>

<!-- need to create UI to add column names and column types when creating a new table -->

<p>
TableName: <input type="text" id="newTableName" @bind="NewTableName"/>
<input type="button" @onclick="CreateNewTable" value="Create Table"/>
Add Column: <input type="text" id="newColumnName" @bind="NewColumnName" />
<select id="dataTypes" @bind="SelectedDataType">
    <option value=@_dateTimeType> @_dateTimeType</option>
    <option value=@_intType>@_intType</option>
    <option value=@_floatType>@_floatType</option>
    <option value=@_stringType>@_stringType</option>
</select>
<input type="button" @onclick="AddColumnToTable" value="Add Column To Table"/>
<input type="button" @onclick="ClearItemsFromTable" value="Reset Columns"/>
Columns: <select name="tableColumns" multiple @bind="NewColumnForTable">
@foreach (var column in NewColumnsForTable)
{
    <option value=@column>@column</option>
}
</select>
</p>

@code {
    private Instance instance;
    string _intType = "System.Int32";
    string _floatType = "System.Single";
    string _dateTimeType = "System.DateTime";
    string _stringType = "System.String";
    List<(string, Type)> _columns = new List<(string, Type)>();
    private string NewColumnForTable = string.Empty;
    private List<string> NewColumnsForTable = new List<string>();
    private List<string> TableNames = new List<string>();
    private List<string> ColumnNames = new List<string>();
    private string SelectedDatabaseName = string.Empty;
    private string SelectedTableName = string.Empty;
    private string NewTableName = string.Empty;
    private List<string> DatabaseNames = new List<string>();
    private string NewDatabaseName = string.Empty;
    private string NewColumnName = string.Empty;
    private string SelectedDataType = string.Empty;
   

    private void GetColumnInfoForTable(ChangeEventArgs e)
    {
        ColumnNames.Clear();
        Debug.WriteLine("GetColumnNamesForTable");
        Debug.WriteLine(e.Value.ToString());

        SelectedTableName = e.Value.ToString();

        FrostService.FrostClient.GetTableInfo(SelectedDatabaseName, SelectedTableName);
        TableInfo item = null;
        if (FrostService.FrostClient.Info.TableInfos.TryGetValue(SelectedTableName, out item))
        {
            item.Columns.ForEach(column => ColumnNames.Add(column.Item1 + "-" + column.Item2.ToString()));
        }
    }

    private async Task GetTableNamesForDatabase(ChangeEventArgs e)
    {
        TableNames.Clear();
        Debug.WriteLine("GetTableNamesForDatabase");
        Debug.WriteLine(e.Value.ToString());

        SelectedDatabaseName = e.Value.ToString();

        var task = FrostService.FrostClient.GetDatabaseInfoAsync(SelectedDatabaseName);
        await task;

        FrostService.FrostClient.GetDatabaseInfo(SelectedDatabaseName);
        DatabaseInfo item;
        if (FrostService.FrostClient.Info.DatabaseInfos.TryGetValue(SelectedDatabaseName, out item))
        {
            item.Tables.ForEach(table => TableNames.Add(table.Item2));
        }
    }

    private void CreateNewTable()
    {
        FrostService.FrostClient.AddTableToDb(SelectedDatabaseName, NewTableName, _columns);
    }

    private void AddColumnToTable()
    {
        string col = NewColumnName + "-" + SelectedDataType;

        var item = (NewColumnName, Type.GetType(SelectedDataType));

        _columns.Add(item);
        NewColumnsForTable.Add(col);
    }

    private void ClearItemsFromTable()
    {
        NewColumnsForTable.Clear();
        _columns.Clear();
    }

    private async Task<List<string>> ConnectToInstance()
    {
        try
        {
            DatabaseNames.Clear();

            var task = instance.Client.FrostClient.GetDatabasesAsync();
            await task;
            FrostService.FrostClient.GetDatabases();

            DatabaseNames = instance.Client.FrostClient.Info.DatabaseNames;
            DatabaseNames.Sort();

            return task.Result;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            return null;
        }
    }

    private void CreateNewDatabase()
    {
        FrostService.FrostClient.AddNewDatabase(NewDatabaseName);
    }
}
