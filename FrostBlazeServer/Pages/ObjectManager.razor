@page "/objectmanager"

@inject Services.Client FrostService

@using Services
@using FrostCommon.ConsoleMessages
@using System.Diagnostics

<h1>Object Manager</h1>

<Instance @ref="instance" OnDatabseClickCallback="@SetCurrentDatabase"></Instance>

<p>
    <h2>Create Database</h2>
    DatabaseName: <input type="text" id="newDatabaseName" @bind="NewDatabaseName" />
    <input type="button" @onclick="CreateNewDatabase" value="Create Database" />
</p>



<p>
    <h2>Tables</h2>
    <select id="tableNames" @onchange="GetColumnInfoForTable" value="SelectedTableName">
        @foreach (var table in FrostService.TableNames)
        {
            <option value="@table">@table</option>
        }
    </select>
</p>

<p>
    <h2>Columns</h2>
    <select name="tableColumnsSelected" multiple="multiple" @bind="NewColumnForTable">
        @foreach (var column in ColumnNames)
        {
            <option value=@column>@column</option>
        }
    </select>
</p>

<p>
    <h2>Create Table</h2>
    @if (FrostService.SelectedDatabaseName != string.Empty)
    {
        <h3>For Database: @FrostService.SelectedDatabaseName</h3>
    }
</p>

<!-- need to create UI to add column names and column types when creating a new table -->

<p>
    TableName: <input type="text" id="newTableName" @bind="NewTableName" />
    <input type="button" @onclick="CreateNewTable" value="Create Table" />
    Add Column: <input type="text" id="newColumnName" @bind="NewColumnName" />
                <select id="dataTypes" @bind="SelectedDataType">
                    <option value=@_dateTimeType> @_dateTimeType</option>
                    <option value=@_intType>@_intType</option>
                    <option value=@_floatType>@_floatType</option>
                    <option value=@_stringType>@_stringType</option>
                    <option value=@_identityType>@_identityType</option>
                </select>
    <input type="button" @onclick="AddColumnToTable" value="Add Column To Table" />
    <input type="button" @onclick="ClearItemsFromTable" value="Reset Columns" />
    Columns: <select name="tableColumns" multiple="multiple" @bind="NewColumnForTable">
        @foreach (var column in NewColumnsForTable)
        {
            <option value=@column>@column</option>
        }
    </select>
</p>

@code {
    private Instance instance = new Instance();
    string _intType = "System.Int32";
    string _floatType = "System.Single";
    string _dateTimeType = "System.DateTime";
    string _stringType = "System.String";
    string _identityType = "System.Int64";
    List<(string, string)> _columns = new List<(string, string)>();
    private string NewColumnForTable = string.Empty;
    private List<string> NewColumnsForTable = new List<string>();
    private List<string> ColumnNames = new List<string>();
    private string SelectedTableName = string.Empty;
    private string NewTableName = string.Empty;

    private string NewDatabaseName = string.Empty;
    private string NewColumnName = string.Empty;
    private string SelectedDataType = string.Empty;

    private void SetCurrentDatabase(MouseEventArgs e)
    {
    }

    private void GetColumnInfoForTable(ChangeEventArgs e)
    {
        TableInfo item = null;
        ColumnNames.Clear();
        Debug.WriteLine("GetColumnNamesForTable");
        Debug.WriteLine(e.Value.ToString());

        SelectedTableName = e.Value.ToString();

        item = FrostService.FrostClient.GetTableInfo(FrostService.SelectedDatabaseName, SelectedTableName);

        item.Columns.ForEach(column => ColumnNames.Add(column.Item1 + "-" + column.Item2.ToString()));
    }

    private void CreateNewTable()
    {
        FrostService.FrostClient.AddTableToDb(FrostService.SelectedDatabaseName, NewTableName, _columns);
    }

    private void AddColumnToTable()
    {
        string col = NewColumnName + "-" + SelectedDataType;

        var item = (NewColumnName, Type.GetType(SelectedDataType).ToString());

        _columns.Add(item);
        NewColumnsForTable.Add(col);
    }

    private void ClearItemsFromTable()
    {
        NewColumnsForTable.Clear();
        _columns.Clear();
    }

    private void CreateNewDatabase()
    {
        FrostService.FrostClient.AddNewDatabase(NewDatabaseName);
    }
}
