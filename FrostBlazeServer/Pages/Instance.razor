@inject Services.Client Item
@using System.Diagnostics
@using FrostCommon.ConsoleMessages

<h2>Instance Information</h2>
<table class="table">
    <tr>
        <th>IP Address</th>
        <th>Console Port Number (Default 519)</th>
        <th>Studio Port Number (Default 525)</th>
    </tr>
    <tr>
        <td><input type="text" id="ipAddress" @bind="Item.IPAddress"/></td>
        <td><input type="text" id="consolePortNumber" @bind="Item.ConsolePortNumber"/></td>
        <td><input type="text" id="studioPortNumber" @bind="Item.StudioPortNumber"/></td>
    </tr>
</table>

<p>
    <h2>Databases</h2> <input type="button" @onclick="ConnectToInstance" value="Connect and Load Databases" />
    <input type="button" @onclick="ConnectToInstanceDefault" value="Default Connect and Load Databases" />
    <select id="databaseNames" value="Item.SelectedDatabaseName" @onchange="GetTableNamesForDatabase" @onclick="OnDatabseClickCallback">
        @foreach (var db in Item.DatabaseNames)
        {
            <option value="@db">@db</option>
        }
    </select>
</p>

<p>
<h2>Partial Databases</h2> 
<select id="partialDatabaseNames" @bind="Item.SelectedPartialDatabaseName">
    @foreach (var pdb in Item.PartialDatabaseNames)
    {
        <option value="@pdb">@pdb</option>
    }
</select>
</p>

@code {
    [Parameter]
    public EventCallback<MouseEventArgs> OnDatabseClickCallback { get; set; }
    public Services.Client Client
    {
        get
        {
            if (Item is null)
            {
                Item = new Services.Client(Item.IPAddress, "127.0.0.1", Item.ConsolePortNumber, Item.StudioPortNumber);
                return Item;
            }
            else
            {
                return Item;
            }
        }
        set
        {
            Item = value;
        }
    }

    private const string SelectOneKeyword = "-- Select One --";

    private void ConnectToInstance()
    {
        try
        {
            Item.DatabaseNames.Clear();
            Item.DatabaseNames.Add(SelectOneKeyword);

            var databases = Item.FrostClient.GetDatabases();

            Item.DatabaseNames.AddRange(databases);
            Item.DatabaseNames.Sort();

            Item.FrostClient.GetPartialDatabases();

            var partialDatabases = Item.FrostClient.GetPartialDatabases();

            Item.PartialDatabaseNames = partialDatabases;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private void ConnectToInstanceDefault()
    {
        try
        {
            Item.IPAddress = "127.0.0.1";
            Item.ConsolePortNumber = 519;
            Item.StudioPortNumber = 525;

            Item.DatabaseNames.Clear();
            Item.DatabaseNames.Add(SelectOneKeyword);

            var databases = Item.FrostClient.GetDatabases();

            Item.DatabaseNames.AddRange(databases);
            Item.DatabaseNames.Sort();

            Item.FrostClient.GetPartialDatabases();

            var partialDatabases = Item.FrostClient.GetPartialDatabases();

            Item.PartialDatabaseNames = partialDatabases;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private void GetTableNamesForDatabase(ChangeEventArgs e)
    {
        Item.TableNames.Clear();
        Item.TableNames.Add(SelectOneKeyword);

        Debug.WriteLine("GetTableNamesForDatabase");
        Debug.WriteLine(e.Value.ToString());

        Item.SelectedDatabaseName = e.Value.ToString();

        if (Item.SelectedDatabaseName.Equals(SelectOneKeyword))
        {
            return;
        }

        var i = Item.FrostClient.GetDatabaseInfo(Item.SelectedDatabaseName);
        if (i.Tables.Count > 0)
        {
            i.Tables.ForEach(t => Item.TableNames.Add(t.Item2));
        }
        else
        {
            Debug.WriteLine("No tables returned");
        }
    }
}