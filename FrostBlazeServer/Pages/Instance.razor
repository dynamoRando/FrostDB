@inject Services.Client Item
@using System.Diagnostics
@using FrostCommon.ConsoleMessages

<h2>Instance Information</h2>
<table class="table">
    <tr>
        <th>IP Address</th>
        <th>Console Port Number (Default 519)</th>
        <th>Studio Port Number (Default 525)</th>
    </tr>
    <tr>
        <td><input type="text" id="ipAddress" @bind="Item.IPAddress"/></td>
        <td><input type="text" id="consolePortNumber" @bind="Item.ConsolePortNumber"/></td>
        <td><input type="text" id="studioPortNumber" @bind="Item.StudioPortNumber"/></td>
    </tr>
</table>

<p>
<h2>Databases</h2> <input type="button" @onclick="ConnectToInstance" value="Load Databases"/>
<select id="databaseNames" value="Item.SelectedDatabaseName" @onchange="GetTableNamesForDatabase" @onclick="OnDatabseClickCallback">
    @foreach (var db in Item.DatabaseNames)
    {
        <option value="@db">@db</option>
    }
</select>
</p>

<p>
<h2>Partial Databases</h2> 
<select id="partialDatabaseNames" @bind="Item.SelectedPartialDatabaseName">
    @foreach (var pdb in Item.PartialDatabaseNames)
    {
        <option value="@pdb">@pdb</option>
    }
</select>
</p>

@code {
    [Parameter]
    public EventCallback<MouseEventArgs> OnDatabseClickCallback { get; set; }
    public Services.Client Client
    {
        get
        {
            if (Item is null)
            {
                Item = new Services.Client(Item.IPAddress, "127.0.0.1", Item.ConsolePortNumber, Item.StudioPortNumber);
                return Item;
            }
            else
            {
                return Item;
            }
        }
        set
        {
            Item = value;
        }
    }

     private async Task<List<string>> ConnectToInstance()
    {
        try
        {
            Item.DatabaseNames.Clear();

            var task = Item.FrostClient.GetDatabasesAsync();
            await task;
            //Item.FrostClient.GetDatabases();

            //Item.DatabaseNames = Item.FrostClient.Info.DatabaseNames;
            Item.DatabaseNames = task.Result;
            Item.DatabaseNames.Sort();

            var task2 = Item.FrostClient.GetPartialDatabasesAsync();
            await task2;

            Item.PartialDatabaseNames = task2.Result;

            return task.Result;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            return null;
        }
    }

    private async Task GetTableNamesForDatabase(ChangeEventArgs e)
    {
        Item.TableNames.Clear();
        Debug.WriteLine("GetTableNamesForDatabase");
        Debug.WriteLine(e.Value.ToString());

        Item.SelectedDatabaseName = e.Value.ToString();

        var task = Item.FrostClient.GetDatabaseInfoAsync(Item.SelectedDatabaseName);
        await task;

        DatabaseInfo i = task.Result;
        if (i.Tables.Count > 0)
        {
            i.Tables.ForEach(t => Item.TableNames.Add(t.Item2));
        }
        else
        {
            Debug.WriteLine("No tables returned");
        }

        //Item.FrostClient.GetDatabaseInfo(Item.SelectedDatabaseName);
        //DatabaseInfo item;
        //if (Item.FrostClient.Info.DatabaseInfos.TryGetValue(Item.SelectedDatabaseName, out item))
        //{
        //    item.Tables.ForEach(table => Item.TableNames.Add(table.Item2));
       // }
    }
}